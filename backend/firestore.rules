rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to only access their own data
    match /model_inputs/{userId}/{documents=**} {
      allow read, write: if request.auth.uid == userId
    }
  }

  match /databases/{database}/documents {
    function userIsAuthenticated() {
      return request.auth.uid != null;
    }

    match /scenarios/{scenario} {
      function userIsOwner(scenario) {
        return request.auth.uid in scenario.data.roles
          ? scenario.data.roles[request.auth.uid] == 'owner'
          : false;
      }

      function userIsViewer(scenario) {
        return request.auth.uid in scenario.data.roles
          ? scenario.data.roles[request.auth.uid] == 'viewer'
          : false;
      }

      // any authenticated user can create scenarios for themselves
      allow create: if userIsAuthenticated();

      // Only scenario owners should have read/write access to their scenarios
      allow read, write: if userIsOwner(resource);

      // Scenario viewers should only be able to read scenarios
      allow read: if userIsViewer(resource);

      match /{documents=**} {
        // owners have full CRUD access to scenario children
        allow read, delete, update: if userIsOwner(get(/databases/$(database)/documents/scenarios/$(scenario)));
        allow create: if userIsOwner(getAfter(/databases/$(database)/documents/scenarios/$(scenario)));

        // viewers can only read scenario children
        allow read: if userIsViewer(get(/databases/$(database)/documents/scenarios/$(scenario)));
      }
    }

    match /users/{user} {
      function userIsSelf(user) {
        return user.data.auth0Id == request.auth.uid;
      }

      // These rules limit read access to the users collection by enforcing that read queries
      // must provide either an email address or Auth0 User ID.  This prevents the potential
      // of a malicious client-side user from accessing every single user document at once.
      // This works because Firestore query constraints must match the same constraints
      // specified by the Firestore rules:
      // https://firebase.google.com/docs/firestore/security/rules-query#secure_and_query_documents_based_on_a_field
      allow read: if userIsAuthenticated() && resource.data.email == resource.data.email;
      allow read: if userIsAuthenticated() && resource.data.auth0Id == resource.data.auth0Id;

      allow update: if userIsSelf(resource) && userIsSelf(request.resource);
      allow create: if userIsSelf(request.resource);
    }

    match /reference_facilities_test/{document=**} {
      allow read: if userIsAuthenticated();
    }
  }
}
